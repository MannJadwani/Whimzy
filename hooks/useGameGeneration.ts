"use client";

import { useCallback } from 'react';
import { useGames, useAppState } from '@/context/AppContext';

export function useGameGeneration() {
  const { addGame } = useGames();
  const { setLoading, setError } = useAppState();

  const generateGame = useCallback(async (prompt: string) => {
    try {
      setLoading(true);
      setError(null);

      // TODO: Replace with actual API call to AI service
      // For now, simulate the generation process
      console.log('Generating game for prompt:', prompt);

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Create mock game object
      const newGame = {
        id: Math.random().toString(36).substr(2, 9),
        title: `Game from: ${prompt.slice(0, 30)}...`,
        description: 'Generated by AI',
        prompt,
        gameType: '2D' as const,
        gameCode: '// Generated game code would go here',
        isPublic: false,
        createdAt: new Date().toISOString(),
        views: 0,
        plays: 0
      };

      // Add to context
      addGame(newGame);
      
      setLoading(false);
      
      // Return the game for potential routing
      return newGame;
      
    } catch (error) {
      console.error('Error generating game:', error);
      setError('Failed to generate game. Please try again.');
      setLoading(false);
      throw error;
    }
  }, [addGame, setLoading, setError]);

  return { generateGame };
}