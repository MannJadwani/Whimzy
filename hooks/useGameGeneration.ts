"use client";

import { useCallback } from 'react';
import { useGames, useAppState } from '@/context/AppContext';

export function useGameGeneration() {
  const { addGame } = useGames();
  const { setLoading, setError } = useAppState();

  const generateGame = useCallback(async (prompt: string, gameType: string = '2d') => {
    try {
      setLoading(true);
      setError(null);

      console.log('Generating game for prompt:', prompt);

      // Call the Gemini API to generate the game
      const response = await fetch('/api/generate-game', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt, gameType }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate game');
      }

      const data = await response.json();

      // Create game object with data from API response
      const newGame = {
        id: data.gameId,
        title: `Game: ${prompt.slice(0, 50)}${prompt.length > 50 ? '...' : ''}`,
        description: 'Generated by AI',
        prompt,
        gameType: gameType as any,
        gameCode: data.gameCode || '// Error generating game code',
        isPublic: false,
        createdAt: new Date().toISOString(),
        views: 0,
        plays: 0
      };

      // Add to context
      addGame(newGame);
      
      setLoading(false);
      
      // Return the game for potential routing
      return newGame;
      
    } catch (error) {
      console.error('Error generating game:', error);
      setError('Failed to generate game. Please try again.');
      setLoading(false);
      throw error;
    }
  }, [addGame, setLoading, setError]);

  return { generateGame };
}