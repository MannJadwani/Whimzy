// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  email        String          @unique
  name         String?
  image        String?
  provider     Provider
  tier         SubscriptionTier @default(FREE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  gamesCreated Int             @default(0)
  totalPlays   Int             @default(0)
  isActive     Boolean         @default(true)

  // Relations
  games         Game[]
  subscriptions Subscription[]
  payments      Payment[]
  gameSessions  GameSession[]
  collections   GameCollection[]
  likes         GameLike[]
  templates     PromptTemplate[]
  analytics     Analytics[]

  @@map("users")
}

model Subscription {
  id                      String             @id @default(cuid())
  userId                  String
  tier                    SubscriptionTier
  razorpaySubscriptionId  String?            @unique
  razorpayCustomerId      String?
  startDate               DateTime           @default(now())
  endDate                 DateTime?
  nextBillingDate         DateTime?
  status                  SubscriptionStatus @default(ACTIVE)
  amount                  Decimal            @db.Decimal(10, 2)
  currency                String             @default("INR")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id                 String        @id @default(cuid())
  userId             String
  subscriptionId     String?
  razorpayOrderId    String?       @unique
  razorpayPaymentId  String?       @unique
  amount             Decimal       @db.Decimal(10, 2)
  currency           String        @default("INR")
  status             PaymentStatus @default(PENDING)
  createdAt          DateTime      @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Game {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  prompt       String    @db.Text
  gameType     GameType  @default(TWO_D)
  gameCode     String?   @db.Text
  thumbnailUrl String?
  isPublic     Boolean   @default(false)
  isFeatured   Boolean   @default(false)
  views        Int       @default(0)
  plays        Int       @default(0)
  likes        Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastPlayedAt DateTime?

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSessions      GameSession[]
  gameInCollections GameInCollection[]
  gameLikes         GameLike[]
  analytics         Analytics[]

  @@map("games")
  @@index([userId])
  @@index([isPublic])
  @@index([isFeatured])
  @@index([gameType])
}

model GameSession {
  id              String    @id @default(cuid())
  gameId          String
  userId          String
  currentGameCode String?   @db.Text
  lastModified    DateTime  @default(now())
  isActive        Boolean   @default(true)

  // Relations
  game        Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatHistory ChatHistory[]

  @@map("game_sessions")
  @@index([userId])
  @@index([gameId])
}

model ChatHistory {
  id               String   @id @default(cuid())
  gameSessionId    String
  message          String   @db.Text
  response         String   @db.Text
  gameCodeSnapshot String?  @db.Text
  role             ChatRole
  createdAt        DateTime @default(now())

  // Relations
  gameSession GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@map("chat_history")
  @@index([gameSessionId])
}

model GameCollection {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameInCollections GameInCollection[]

  @@map("game_collections")
  @@index([userId])
  @@index([isPublic])
}

model GameInCollection {
  id           String   @id @default(cuid())
  collectionId String
  gameId       String
  sortOrder    Int      @default(0)
  addedAt      DateTime @default(now())

  // Relations
  collection GameCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  game       Game           @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("games_in_collections")
  @@unique([collectionId, gameId])
  @@index([collectionId])
  @@index([gameId])
}

model GameLike {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_likes")
  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

model PromptTemplate {
  id        String   @id @default(cuid())
  userId    String
  title     String
  prompt    String   @db.Text
  category  String
  gameType  GameType @default(TWO_D)
  isPublic  Boolean  @default(false)
  uses      Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prompt_templates")
  @@index([userId])
  @@index([isPublic])
  @@index([category])
}

model Analytics {
  id        String         @id @default(cuid())
  userId    String?
  gameId    String?
  eventType AnalyticsEvent
  metadata  Json?
  createdAt DateTime       @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  game Game? @relation(fields: [gameId], references: [id], onDelete: SetNull)

  @@map("analytics")
  @@index([userId])
  @@index([gameId])
  @@index([eventType])
  @@index([createdAt])
}

// Enums
enum Provider {
  GOOGLE
  GITHUB
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum GameType {
  TWO_D
  THREE_D
  ADVANCED_TWO_D
}

enum ChatRole {
  USER
  ASSISTANT
}

enum AnalyticsEvent {
  GAME_CREATED
  GAME_PLAYED
  GAME_LIKED
  GAME_SHARED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_CANCELLED
  PAYMENT_COMPLETED
  USER_REGISTERED
  CHAT_MESSAGE_SENT
}